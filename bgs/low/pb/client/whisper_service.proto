syntax = "proto2";

package bgs.protocol.whisper.v1;

import "bgs/low/pb/client/whisper_types.proto";
import "bgs/low/pb/client/rpc_types.proto";
import "bgs/low/pb/client/account_types.proto";
import "bgs/low/pb/client/message_types.proto";

message SubscribeRequest {
	optional account.v1.AccountId	agent_id	= 1;
}

message SubscribeResponse {
	repeated ViewMarker	marker	= 1;
}

message UnsubscribeRequest {
	optional account.v1.AccountId	agent_id	= 1;
}

message SendWhisperRequest {
	optional account.v1.AccountId	agent_id	= 1;
	optional SendOptions	whisper	= 2;
}

message SetTypingIndicatorRequest {
	optional account.v1.AccountId	agent_id	= 1;
	optional account.v1.AccountId	target_id	= 2;
	optional TypingIndicator	action	= 3;
}

message AdvanceViewTimeRequest {
	optional account.v1.AccountId	agent_id	= 1;
	optional account.v1.AccountId	target_id	= 2;
}

message GetWhispersRequest {
	optional account.v1.AccountId	agent_id	= 1;
	optional account.v1.AccountId	target_id	= 2;
	optional GetOptions	options	= 3;
}

message GetWhispersResponse {
	repeated Whisper	whisper	= 1;
	optional uint64	continue_time	= 2;
}

service WhisperService {
	rpc Subscribe (SubscribeRequest) returns (SubscribeResponse) {}
	rpc Unsubscribe (UnsubscribeRequest) returns (NoData) {}
	rpc SendWhisper (SendWhisperRequest) returns (NoData) {}
	rpc SetTypingIndicator (SetTypingIndicatorRequest) returns (NoData) {}
	rpc AdvanceViewTime (AdvanceViewTimeRequest) returns (NoData) {}
	rpc GetWhispers (GetWhispersRequest) returns (GetWhispersResponse) {}
}

