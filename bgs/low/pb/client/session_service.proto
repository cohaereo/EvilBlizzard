syntax = "proto2";

package bgs.protocol.session.v1;

import "bgs/low/pb/client/account_types.proto";
import "bgs/low/pb/client/rpc_types.proto";
import "bgs/low/pb/client/session_types.proto";

message CreateSessionRequest {
	optional account.v1.Identity	identity	= 1;
	optional fixed32	platform	= 2;
	optional fixed32	locale	= 3;
	optional string	client_address	= 4;
	optional int32	application_version	= 5;
	optional string	user_agent	= 6;
	optional bytes	session_key	= 7;
	optional SessionOptions	options	= 8;
	optional bool	requires_mark_alive	= 9 [default = false];
}

message CreateSessionResponse {
	optional string	session_id	= 1;
}

message UpdateSessionRequest {
	optional account.v1.Identity	identity	= 1;
	optional SessionOptions	options	= 2;
}

message DestroySessionRequest {
	optional account.v1.Identity	identity	= 1;
	optional string	session_id	= 2;
}

message GetSessionCapacityRequest {
}

message GetSessionCapacityResponse {
	optional uint32	sessions_available	= 1;
	optional uint32	time_frame_seconds	= 2;
}

message GetSessionStateByBenefactorRequest {
	optional account.v1.GameAccountHandle	benefactor_handle	= 1;
	optional bool	include_billing_disabled	= 2 [default = false];
}

message GetSessionStateByBenefactorResponse {
	optional account.v1.GameAccountHandle	benefactor_handle	= 1;
	repeated SessionState	session	= 2;
}

message MarkSessionsAliveRequest {
	repeated SessionIdentifier	session	= 1;
}

message MarkSessionsAliveResponse {
	repeated SessionIdentifier	failed_session	= 1;
}

message GetSessionStateRequest {
	optional account.v1.GameAccountHandle	handle	= 1;
	optional bool	include_billing_disabled	= 2 [default = false];
}

message GetSessionStateResponse {
	optional account.v1.GameAccountHandle	handle	= 1;
	optional SessionState	session	= 2;
}

message GetSignedSessionStateRequest {
	optional account.v1.GameAccountHandle	agent_id	= 1;
}

message GetSignedSessionStateResponse {
	optional string	token	= 1;
}

message RefreshSessionKeyRequest {
	optional bytes	session_key	= 1;
}

message RefreshSessionKeyResponse {
	optional bytes	session_key	= 1;
}

message SessionCreatedNotification {
	optional account.v1.Identity	identity	= 1;
	optional uint32	reason	= 2;
	optional string	session_id	= 3;
}

message SessionDestroyedNotification {
	optional account.v1.Identity	identity	= 1;
	optional uint32	reason	= 2;
	optional string	session_id	= 3;
}

message SessionUpdatedNotification {
	optional account.v1.Identity	identity	= 1;
	optional uint32	reason	= 2;
	optional string	session_id	= 3;
}

service SessionListener {
	rpc OnSessionCreated (SessionCreatedNotification) returns (NO_RESPONSE) {}
	rpc OnSessionDestroyed (SessionDestroyedNotification) returns (NO_RESPONSE) {}
	rpc OnSessionUpdated (SessionUpdatedNotification) returns (NO_RESPONSE) {}
}

service SessionService {
	rpc CreateSession (CreateSessionRequest) returns (CreateSessionResponse) {}
	rpc DestroySession (DestroySessionRequest) returns (NoData) {}
	rpc UpdateSession (UpdateSessionRequest) returns (NoData) {}
	rpc GetSessionCapacity (GetSessionCapacityRequest) returns (GetSessionCapacityResponse) {}
	rpc GetSessionStateByBenefactor (GetSessionStateByBenefactorRequest) returns (GetSessionStateByBenefactorResponse) {}
	rpc MarkSessionsAlive (MarkSessionsAliveRequest) returns (MarkSessionsAliveResponse) {}
	rpc GetSessionState (GetSessionStateRequest) returns (GetSessionStateResponse) {}
	rpc GetSignedSessionState (GetSignedSessionStateRequest) returns (GetSignedSessionStateResponse) {}
	rpc RefreshSessionKey (RefreshSessionKeyRequest) returns (RefreshSessionKeyResponse) {}
}

