// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
//   Input: event_view_types.proto
// </auto-generated>

#region Designer generated code
#pragma warning disable CS0612, CS0618, CS1591, CS3021, CS8981, IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
namespace bgs.protocol
{

    [global::ProtoBuf.ProtoContract()]
    public partial class GetEventOptions : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"fetch_from")]
        public ulong FetchFrom
        {
            get => __pbn__FetchFrom.GetValueOrDefault();
            set => __pbn__FetchFrom = value;
        }
        public bool ShouldSerializeFetchFrom() => __pbn__FetchFrom != null;
        public void ResetFetchFrom() => __pbn__FetchFrom = null;
        private ulong? __pbn__FetchFrom;

        [global::ProtoBuf.ProtoMember(2, Name = @"fetch_until")]
        public ulong FetchUntil
        {
            get => __pbn__FetchUntil.GetValueOrDefault();
            set => __pbn__FetchUntil = value;
        }
        public bool ShouldSerializeFetchUntil() => __pbn__FetchUntil != null;
        public void ResetFetchUntil() => __pbn__FetchUntil = null;
        private ulong? __pbn__FetchUntil;

        [global::ProtoBuf.ProtoMember(3, Name = @"max_events")]
        public uint MaxEvents
        {
            get => __pbn__MaxEvents.GetValueOrDefault();
            set => __pbn__MaxEvents = value;
        }
        public bool ShouldSerializeMaxEvents() => __pbn__MaxEvents != null;
        public void ResetMaxEvents() => __pbn__MaxEvents = null;
        private uint? __pbn__MaxEvents;

        [global::ProtoBuf.ProtoMember(4, Name = @"order")]
        [global::System.ComponentModel.DefaultValue(EventOrder.EventDescending)]
        public EventOrder Order
        {
            get => __pbn__Order ?? EventOrder.EventDescending;
            set => __pbn__Order = value;
        }
        public bool ShouldSerializeOrder() => __pbn__Order != null;
        public void ResetOrder() => __pbn__Order = null;
        private EventOrder? __pbn__Order;

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class ViewMarker : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"last_read_time")]
        public ulong LastReadTime
        {
            get => __pbn__LastReadTime.GetValueOrDefault();
            set => __pbn__LastReadTime = value;
        }
        public bool ShouldSerializeLastReadTime() => __pbn__LastReadTime != null;
        public void ResetLastReadTime() => __pbn__LastReadTime = null;
        private ulong? __pbn__LastReadTime;

        [global::ProtoBuf.ProtoMember(2, Name = @"last_message_time")]
        public ulong LastMessageTime
        {
            get => __pbn__LastMessageTime.GetValueOrDefault();
            set => __pbn__LastMessageTime = value;
        }
        public bool ShouldSerializeLastMessageTime() => __pbn__LastMessageTime != null;
        public void ResetLastMessageTime() => __pbn__LastMessageTime = null;
        private ulong? __pbn__LastMessageTime;

    }

    [global::ProtoBuf.ProtoContract()]
    public enum EventOrder
    {
        [global::ProtoBuf.ProtoEnum(Name = @"EVENT_DESCENDING")]
        EventDescending = 0,
        [global::ProtoBuf.ProtoEnum(Name = @"EVENT_ASCENDING")]
        EventAscending = 1,
    }

}

#pragma warning restore CS0612, CS0618, CS1591, CS3021, CS8981, IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
#endregion
